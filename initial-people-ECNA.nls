;;MODEL INITIALIZATION
to setup-ECNA-people
  create-non-agent-susceptibles (termination-node)[
  ]

  create-people initial-infected[
    set color red
    set time-infected -1 
    set aware? false

    ;chooses a random sex and stage
    let rand-sex random-float 1
    let rand-stage random-float 1
    let sex-ind 0
    let stage-ind 0
    while [sex-ind < temp-num-sex]; not using num-sex cuz not modeling idu
    [
      
      if rand-sex <= item sex-ind cumulative-sex
      [
        set sex sex-ind + 1
        set sex-ind temp-num-sex ;not num-sex cuz not modeling idu
      ]
      set sex-ind sex-ind + 1
    ]
    
;    set locationID one-of location-list
    if sex = 1 or sex = 4 [ set locationID rnd:weighted-one-of-list location-list [ [p] -> item p (HF_PWH_by_juri)]];; random assign locationID of new susceptible agent weighted by PLWH
    if sex = 2 or sex = 5 [ set locationID rnd:weighted-one-of-list location-list [ [p] -> item p (HM_PWH_by_juri)]];; random assign locationID of new susceptible agent weighted by PLWH
    if sex = 3 or sex = 6 [ set locationID rnd:weighted-one-of-list location-list [ [p] -> item p (MSM_PWH_by_juri)]];; random assign locationID of new susceptible agent weighted by PLWH
; 
    
    set partner-type -1
    
    ;;Use option 1 or option 2
    ;OPTION 1
    set CD4-count 600
    set stage 1
    ;initializeTrans 
    
    ;OPTION 2
    set-initial-stage;; procedure in initial-people-ECNA.nls
    set-initial-age ;; procedure in initial-people-ECNA.nls; sets initial-age to match 2006 population
    set-HIV-variables ;;in initial-people-ECNA.nls; sets CD4 count distributions to match 2006 population
    
    set index? true

    set desired-degree return-random-degree-by-age
    initialize-contacts ;in contact-activation.nls

    setxy random-xcor random-ycor
    set partners-per-month round (desired-degree / 12)
    if partners-per-month < 1 [set partners-per-month 1]
    ;layout-ECNA Ttree-links
  ]
  
   
  kill-not-needed-links ;Kills all links a agent with no infected contacts has
  check-degree ;in ECNA.nls
 
  ;set num-exposed-sus count susceptibles with [contacts? = true]
  ;set max_degree max [desired-degree] of turtles;max_degree_agent
  set max_degree last degree-dist-Bin 
  do-dry-run-network ;in dryrun.nls  
end

to set-initial-stage
   ;;set stage
    let randomvalue random-float 1
    ifelse randomvalue < item (sex - 1) current-ARTsuppressed 
    [set stage 6]
    [ifelse randomvalue < item (sex - 1) current-ARTsuppressed + item (sex - 1) current-unaware 
      [set stage 2]
      [ifelse randomvalue < item (sex - 1) current-ARTsuppressed + item (sex - 1) current-unaware + item (sex - 1) current-no-care
        [set stage 3]
        [ifelse randomvalue < item (sex - 1) current-ARTsuppressed + item (sex - 1) current-unaware + item (sex - 1) current-no-care + item (sex - 1) current-care-noART
          [set stage 4]
          [set stage 5]
      ]
      ]
    ]
end

to set-risk-group-ECNA 
  
  let refSexInd 1 ; based on evaluating fit
  let totRefGroup count people with [infected? = true and dead = 0 and sex = refSexInd]
  let totalPop totRefGroup /((item (refSexInd - 1) sex-dist-target) ) ;; determine number PLWH people needed in simulation
  
  let sexInd 1
  let required-pop 0
  while [sexInd <= temp-num-sex][
    set required-pop totalPop * (item (sexInd - 1) sex-dist-target )
    let num-remove count people with [infected? = true and dead = 0 and sex = sexInd] - required-pop
    if num-remove > 0 [
      ask n-of num-remove people with [infected? = true and dead = 0 and sex = sexInd]
      [
        ask my-links [die]
        die
      ]
    ]
    set sexInd sexInd + 1
  ]
  
end

to set-initial-age-ECNA [sexInd ]
  ; redistributes people to ensure age distribution of PLWH is mainatined 
  let maxInd (position (max actual-age-dist-PLWH) actual-age-dist-PLWH) ;takes index of greatest proportion age group 
  let totalPop count people with [infected? = true and dead = 0 and age > item maxInd age-group and age <= item (maxInd + 1) age-group and sex = sexInd ] / item maxInd actual-age-dist-PLWH ; determines number of PLWH
  let i 0
  ;print totalPop
  while [i < length actual-age-dist-PLWH][
    let change round(count people with [infected? = true and dead = 0 and age > item i age-group and age <= item (i + 1) age-group and sex = sexInd ] - totalPop * item i actual-age-dist-PLWH) ; determine numbe of people to reset as not infected 
    
    ;;if more peple than needed remove them
    ifelse change > 0[
      ask n-of change people with [infected? = true and dead = 0 and age > item i age-group and age <= item (i + 1) age-group and sex = sexInd ]
      [set infected? false
        let a age
        set breed susceptibles 
        set susceptible-age a
        ask my-Ttree-links [set breed ECNA-links]
      ]
    ]
     ;;ELSE if fewer peple than needed add them from existing susceptibles if that age is available, and if not, create new people 
    [if change < 0[
      let j 0
      while [j < (- 1 * change)][
        ;let new-sex get-sex-mixing sexInd
        ifelse count (susceptibles with [susceptible-age > item i age-group and susceptible-age <= item (i + 1) age-group and sex = sexInd]) > 1[
          ask one-of susceptibles with [susceptible-age > item i age-group and susceptible-age <= item (i + 1) age-group and sex = sexInd ][
            let a susceptible-age
            set breed people
            set age a
            initializeTrans 
            set sex sexInd
          ]
        ]
        [
          create-people initial-infected[
            set time-infected -1 
            set aware? false
            set age item i age-group + random (item (i + 1) age-group - item i age-group)
            set sex sexInd
            
            
            set index? true
            set desired-degree return-random-degree-by-age
            initialize-contacts
            
          ]
        ]
        set j j + 1
        
      ]
      ]
    ]
    
    set i i + 1
  ]
  
  ask people [set new-infections 0]
  
  ;; determine new infections to fit distribution by age
  let newINf totalPop * item (sexInd - 1) prop-new-infections
  
  set i 0
  while [i < length actual-age-dist-NewInfections][
    let number floor(newINf * item i actual-age-dist-NewInfections)
    ask n-of number people with [infected? = true and dead = 0 and age > item i age-group and age <= item (i + 1) age-group and sex = sexInd ][
      set new-infections 1
    ]
    set i i + 1
  ]
  ;age-initial
  ;cumulative-age1
  ;actual-age-dist-PLWH
end

to set-initial-stage-ECNA [sexInd]
  ask people with [sex = sexInd] [set stage 0]
  
  let totPop count people with [infected? = true and dead = 0 and sex = sexInd ]
  if totPop = 0 [set totPop 1]
  
  let numUnaware item (sexInd - 1) current-unaware * totPop ;; expected number unaware
  
  let numUnawareNew floor(numUnaware * item (sexInd - 1) prop-unaware-new) ;; expected number unaware and new infected
  
  let numAwareNew 0
  if (count people with [infected? = true and dead = 0 and new-infections = 1 and sex = sexInd ] - numUnawareNew) > 0
  [set numAwareNew (count people with [infected? = true and dead = 0 and new-infections = 1 and sex = sexInd ] - numUnawareNew)]
  ;let numAwareNew (count people with [infected? = true and dead = 0 and new-infections = 1 and sex = sexInd ] - numUnawareNew)
  
    ask up-to-n-of numUnawareNew people with [infected? = true and dead = 0 and new-infections = 1 and sex = sexInd ]
    [set stage 2]
  
  ask n-of (floor(0.5 * numAwareNew)) people with [infected? = true and dead = 0 and new-infections = 1 and stage = 0 and sex = sexInd ];; hard coded 50% change if needed- no data for this
  [set stage 3]
  ask people with [infected? = true and dead = 0 and new-infections = 1 and stage = 0 and sex = sexInd ] ;; set remaning new infections to zero
  [set stage 4]
  
  ask n-of (round(numUnaware) - numUnawareNew) people with [infected? = true and dead = 0 and new-infections = 0 and sex = sexInd ]
  [set stage 2]
  
  let assignedStageDist [0 0 0 0 0 0]
  let i 0
  while [i < 6][ ;previously  while i<0 - not sure why ;6 because 6 stages (change to len of assignedStageDist)
    let value (count people with [infected? = true and dead = 0 and sex = sexInd and stage = (i + 1)] / totPop)
    set assignedStageDist replace-item i assignedStageDist value
    set i i + 1
  ]
  
  ask people with [infected? = true and dead = 0 and sex = sexInd and stage = 0][
   let randomvalue random-float 1
    ifelse randomvalue < (item (sex - 1) current-ARTsuppressed - item 5 assignedStageDist)
    [set stage 6]
    [ifelse randomvalue < item (sex - 1) current-ARTsuppressed -  item 5 assignedStageDist + item (sex - 1) current-unaware  - item 2 assignedStageDist
      [set stage 2]
      [ifelse randomvalue < item (sex - 1) current-ARTsuppressed -  item 5 assignedStageDist + item (sex - 1) current-unaware - item 2 assignedStageDist + item (sex - 1) current-no-care - item 3 assignedStageDist
        [set stage 3]
        [ifelse randomvalue < item (sex - 1) current-ARTsuppressed - item 5 assignedStageDist + item (sex - 1) current-unaware - item 2 assignedStageDist + item (sex - 1) current-no-care - item 3 assignedStageDist + item (sex - 1) current-care-noART - item 4 assignedStageDist
          [set stage 4]
          [set stage 5]
      ]
      ]
    ]
  ]
  
end

to set-initial-age ;;taken from part of PATH 2.0 and 3.0 in initial-people.nls

set age 0  
    set new-infections 0
    ;; From those unuaware (stage 1 and stage 2) a proportion are new  infections. So setting age to distribution in new infections
    
    let randnum random-float 1
    ;;Portion of those unaware are new incidence (years 2006-2008) (assuming all but 10% of new incidence MSM are unaware), so setting their age to age distribution of new incidence         
      
    let prop-num item (sex - 1) prop-unaware-new  ;; proportion unaware who are new incidence                                       
           
    ;; From those unuaware (stage 1 and stage 2) a proportion are new infections. So setting age to distribution in new infections
    ;; assuming 10% of new incidences MSM (which constitutes 4% of aware population) are aware but not on ART. Assigning them the age of new incidences
    ;; assuming all HIV with age >55 (0.201225872 of total population) belongs to aware group by assumption that they got infected when younger. 
    ;; if stage >= 3 and random-float 1 <= 0.202267781 ;; HET+MSM;; 
    ;; 0.197588908 ;; HET+MSM+IDU
    ;; [set age 55 + random 15] 
    let k 0
    if (stage = 2 and random-float 1 <= prop-num) or stage <= 1 or (stage = 3 and (sex = 3 or sex = 6) and random-float 1 <= prop-MSM-stage3-new) or (stage = 4 and (sex = 3 or sex = 6) and random-float 1 <= prop-MSM-stage4-new)
    [
      set new-infections 1
      set k 0
      while [k < length age-initial - 1]
      [
        ifelse randnum <= item k cumulative-age1
        [
          set age item k age-initial + random (item (k + 1) age-initial - item k age-initial)
          set k length age-initial
        ]
        [set k k + 1]
      ]
    ]
    
    ;;assigning age to remaining people    
    set randnum random-float 1
    ;Set of remaining people
    if age = 0
    [
      set k 0
      while [k < length age-initial - 1]
      [
        ifelse randnum <= item k cumulative-age2
        [
          set age item k age-initial + random (item (k + 1) age-initial - item k age-initial)
          set k length age-initial
        ]
        [set k k + 1]
      ]
    ] 
  
    
    let i 0
    while [i < length age-sexual-NHBS]
    [
      if age < item i age-sexual-NHBS
      [
        set age-index i
        set i length age-sexual-NHBS
      ]   
      set i i + 1
    ]  
   
    set needle-sharing? false
    ;; assign sexual and IDU partnerships
    if sex >= 4 
    [
      ifelse random-float 1 <= percent-IDU-sharing
      [set needle-sharing? true]
      [set needle-sharing? false]
    ]
end

;;setting disease progression variables to match 2006 PLPWh: individuals in year zero can be at different CD4 count and treatment-regimen
to set-HIV-variables
  
  let CD4-upper 0
  let CD4-lower 0
  
  ifelse stage = 1
  [
    set breed people
    set-infected-variables ;in initial-people.nls
    set age-at-infection age - (random 3 / time-unit) ;; 7 weeks ~ 2 months of infection
  ]
  
  [
    let infected true
    let viral (item (stage - 1) viral-load-by-stage-mean)
    let treatment false
    let quarter-ART 0
    let age-ART 0
    let change-dur 0
    let known false    
    set drop-out? false
    
    if stage = 2 
    [
      ifelse new-infections = 1
      [
        set CD4-lower item (stage - 1) CD4-lower-new-infection
        set CD4-upper item (stage - 1) CD4-upper-new-infection
      ]
      [
        ifelse random-float 1 < item 0 unaware-CD4-prob 
        [
          set CD4-lower item 0 unaware-CD4-lower
          set CD4-upper item 0 unaware-CD4-upper
        ]
        [
          ifelse random-float 1 < item 1 unaware-CD4-prob
          [
            set CD4-lower item 1 unaware-CD4-lower
            set CD4-upper item 1 unaware-CD4-upper
          ]
          [
            set CD4-lower item 2 unaware-CD4-lower
            set CD4-upper item 2 unaware-CD4-upper
          ]
        ]
      ]
    ]    
    
    if stage = 3 
    [
      ifelse new-infections = 1 ;; 10% of MSM's with new incidence are aware
      [
        set CD4-lower item (stage - 1) CD4-lower-new-infection
        set CD4-upper item (stage - 1) CD4-lower-new-infection
      ]
      [
        set CD4-lower awareNoCare-CD4-lower
        set CD4-upper awareNoCare-CD4-upper
        if (random-float 1 <= initial-drop-out)  ;; those who drop out of care have undergone a few regimen
        [
          set change-dur 1
          set drop-out? true
        ]       
      ]
      set known true
    ]
    
    if stage = 4
    [
      ifelse new-infections = 1 ;; 10% of MSM's with new incidence are aware
      [
        set CD4-lower item (stage - 1) CD4-lower-new-infection
        set CD4-upper item (stage - 1) CD4-upper-new-infection
      ]
      [
        ifelse random-float 1 <= item 0 inCareNoART-CD4-prob;; assuming 500 CD4 count is guideline for treatment
        [
          set CD4-lower item 0 inCareNoART-CD4-lower
          set CD4-upper item 0 inCareNoART-CD4-upper
        ]
        [
          ifelse random-float 1 <= item 1 inCareNoART-CD4-prob
          [
            set CD4-lower item 1 inCareNoART-CD4-lower
            set CD4-upper item 1 inCareNoART-CD4-upper
          ]
          [
            set CD4-lower item 2 inCareNoART-CD4-lower
            set CD4-upper item 2 inCareNoART-CD4-upper
          ]
        ]   
      ]    
      set known true
      set linked-to-care? true
    ]
    
    if stage >= 5
    [
      set treatment true 
      set CD4-lower ART-CD4-lower
      set CD4-upper ART-CD4-upper
      set quarter-ART 1
      set age-ART age
      set change-dur 1
      set known true
    ]    
    
    set breed people
    set-infected-variables
    set infected-previous-quarter? infected             
    set infected? infected
    set aware-previous-quarter? known
    set aware? known
    
    if stage >= 3
    [set-CD4-diagnosis];in testing-frequency.nls
    
    if change-dur = 1
    [;;setting CD4 count to zero so total-regimen could be set, whihc is set only when CD4 count reaches that for treatment 
      set CD4-count 0
      ;;stage 4 and 5 indicates on ART, randomly choosing length of time already on ART
      let age-add 0
      let randnum-dur random 3
      if randnum-dur <= 0
      [
        set age-add age-add + regimen1-dur * time-unit
        set regimen1-dur 0
      ]
      if randnum-dur <= 1
      [
        set age-add age-add + regimen2-dur * time-unit
        set regimen2-dur 0
      ]
      if randnum-dur <= 2
      [
        set age-add age-add + regimen3-dur * time-unit
        set regimen3-dur 0
      ]
      if randnum-dur <= 3
      [
        set age-add age-add + regimen4-dur * time-unit
        set regimen4-dur 0
        ;;if all regimens have been used up will go on salvage therapy. Setting prev-total-regimen to 1 indicating has been on ART 
        set prev-total-regimen 1
      ]
      set-total-regimen 
 
      ifelse random-float 1 < item 0 CD4-at-ART-prob
      [set CD4-ART item 0 CD4-at-ART-lower + random (item 0 CD4-at-ART-upper - item 0 CD4-at-ART-lower)]
      [
        ifelse random-float 1 < item 1 CD4-at-ART-prob
        [set CD4-ART item 1 CD4-at-ART-lower + random (item 1 CD4-at-ART-upper - item 1 CD4-at-ART-lower)]
        [set CD4-ART item 1 CD4-at-ART-lower + random (item 2 CD4-at-ART-upper - item 2 CD4-at-ART-lower)]
      ];;CD4 count at which ART actually started : might be different from  CD4-to-start-ART because 
       ;of CD4 decline might not exactly coincide with the required start
        
      if stage >= 5
      [
        set quarter-ART-start 1
        set age-ART-start age - age-add
        set linked-to-care? true
      ]
      
    ]
    
    set age-at-infection age - 1;; random but difference of 1 to separate acute phase
    set prev-prev-on-treatment? treatment
    set prev-on-treatment? treatment
    set on-treatment? treatment
    set viral-load viral
    set-viral-load-stratum
    set prev-CD4-count CD4-lower + random (CD4-upper - CD4-lower)
    set CD4-count prev-CD4-count
    set-CD4-stratum    
  ]
  
  set trans-year 0
  
end

to set-infected-variables
  
  set infected-2013-2022?  false
  set acute-stg-length  0
  set time-at-diagnosis 0
  set time-at-infection ticks
  set trans-year ceiling ((ticks + 1) / time-unit)
  
  set age-at-infection age
  ; carefully [
  set non-AIDS-death (item (age - 10) define-non-AIDS-death) * (time-unit / 12)
  ;  ]
  ;  [
  ;    print who
  ;    print [dead] of link-neighbors
  ;    print [age] of link-neighbors
  ;    stop
  ;  ]
  
  
  ;if not index?
  ;[print age]
  
  set infected-previous-quarter? false           
  set infected? true
  set aware-previous-quarter? false
  set aware? false
  set prev-total-regimen 0
  set total-regimen 0
  set prev-onART? false
  set prev-VLS? false
  set drop-out? false
  set prev-prev-on-treatment? false
  set prev-on-treatment? false
  set on-treatment? false
  set prev-regimen 0
  set regimen 0
  set onART-length 0
  set time-on-therapy 1
  set viral-load trunc-normal-random-number (item 0 viral-load-by-stage-mean) (item 0 viral-load-by-stage-std) (item 0 viral-load-by-stage-lb) (item 0 viral-load-by-stage-ub); 5.3
  set-viral-load-stratum ;in update-simulation.nls
  
  ;       let get-val normal-random-number 825 38.27 
  ;      while [get-val > 900 or get-val < 750]
  ;      [set get-val normal-random-number 900 38.27 ]
  
  ;; calibrated to match time time to CD4 ddecline in Lodi et al, CID, 2011
  set prev-CD4-count item 0 CD4-lower-new-infection + random (item 0 CD4-upper-new-infection - item 0 CD4-lower-new-infection) 
  set CD4-count prev-CD4-count
  
  set-CD4-stratum ;in update-simulation.nls
  
  set prev-OI-type 0
  set OI-type 0
  set prev-OI? false
  set OI? false
  set prev-AIDS? false
  set AIDS? false
  set CD4-ART 0
  ;; quarter-ART-start is month at first ART initiation. All other ART time parameters get reset when dropping out of care and reentry. This does not
  set quarter-ART-start 0 
  set age-ART-start 0

  
  set clinical-AIDS 1;;CHECK IF USED
  
  ;set-death-with-ART
  set-death-without-ART ;in update-simulation.nls
  
  set prev-dead 0
  set dead 0
  set discounted-life 0
  
  ; et-time-diag-to-death;;CHECK IF USED
  
  ;set-discount-factor
  ;set-discount-rate-factor
  ;set-QALYs
  set sum-QALYS 0
  set discounted-QALYs 0
  set sum-life-years 0
  
  set linked-to-care? false
  set in-care? false
  ;set-costs
  ;set-discounted-costs
  ;set-number-transmissions
  set life-time-transmissions 0 
  
  set retention-in-ART 0
  
  ; set-alive-if-no-HIV?
  
  set total-utilization-cost 0;; inpatient + outpatient (incurred from start of care for HIV) + ED costs (incurred from start of HIV)
  set total-regimen-cost 0
  set total-OI-cost 0
  
  set TOTAL-COSTS 0
  set TOTAL-QALYs 0
  set undiscounted-Total-costs 0
  set util-cost 0 
  set test-cost 0
  set care-service-cost 0
  set regimen-cost-quarter 0
  set oi-cost-quarter 0
  
  ; set yearly-cost [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]  
  
  set discount-life-if-no-HIV 0
  
  set-discount-life-if-no-HIV ;in breed-people.nls
  
  set AIDS-at-diagnosis? false
  set AIDS-within-6mon? false
  
end

to set-discount-life-if-no-HIV
  
  let i ticks
  repeat non-AIDS-death * 12 / time-unit
  [
    set i i + 1
    let discount-rate-factor-global (1 + discount-rate) ^ floor((i - t-start - 1) / time-unit)
    set discount-life-if-no-HIV (discount-life-if-no-HIV + (1 / discount-rate-factor-global))
  ]
  
end